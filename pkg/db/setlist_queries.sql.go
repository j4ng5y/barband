// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: setlist_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSetList = `-- name: CreateSetList :one
INSERT INTO set_lists (
    band_id, id, name, created_at
) VALUES (
             $1, $2, $3, current_timestamp
         ) RETURNING band_id, id, name, created_at, updated_at, deleted_at
`

type CreateSetListParams struct {
	BandID uuid.NullUUID
	ID     uuid.UUID
	Name   sql.NullString
}

func (q *Queries) CreateSetList(ctx context.Context, arg CreateSetListParams) (SetList, error) {
	row := q.db.QueryRowContext(ctx, createSetList, arg.BandID, arg.ID, arg.Name)
	var i SetList
	err := row.Scan(
		&i.BandID,
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteSetList = `-- name: DeleteSetList :exec
UPDATE set_lists SET deleted_at = current_timestamp
WHERE id = $1
`

func (q *Queries) DeleteSetList(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSetList, id)
	return err
}

const readSetList = `-- name: ReadSetList :one
SELECT band_id, id, name, created_at, updated_at, deleted_at FROM set_lists
WHERE id = $1 LIMIT 1
`

func (q *Queries) ReadSetList(ctx context.Context, id uuid.UUID) (SetList, error) {
	row := q.db.QueryRowContext(ctx, readSetList, id)
	var i SetList
	err := row.Scan(
		&i.BandID,
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const readSetLists = `-- name: ReadSetLists :many
SELECT band_id, id, name, created_at, updated_at, deleted_at FROM set_lists
`

func (q *Queries) ReadSetLists(ctx context.Context) ([]SetList, error) {
	rows, err := q.db.QueryContext(ctx, readSetLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SetList
	for rows.Next() {
		var i SetList
		if err := rows.Scan(
			&i.BandID,
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSetList = `-- name: UpdateSetList :exec
UPDATE set_lists SET name = $2, updated_at = current_timestamp
WHERE id = $1
`

type UpdateSetListParams struct {
	ID   uuid.UUID
	Name sql.NullString
}

func (q *Queries) UpdateSetList(ctx context.Context, arg UpdateSetListParams) error {
	_, err := q.db.ExecContext(ctx, updateSetList, arg.ID, arg.Name)
	return err
}
