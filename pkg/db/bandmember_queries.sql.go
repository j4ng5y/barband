// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: bandmember_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBandMember = `-- name: CreateBandMember :one
INSERT INTO band_members (
    band_id, id, prefix, first_name, middle_name, last_name, suffix, nick_name, phone_number, created_at
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, current_timestamp
         ) RETURNING band_id, id, prefix, first_name, middle_name, last_name, suffix, nick_name, phone_number, created_at, updated_at, deleted_at
`

type CreateBandMemberParams struct {
	BandID      uuid.NullUUID
	ID          uuid.UUID
	Prefix      sql.NullString
	FirstName   string
	MiddleName  sql.NullString
	LastName    sql.NullString
	Suffix      sql.NullString
	NickName    sql.NullString
	PhoneNumber sql.NullInt32
}

func (q *Queries) CreateBandMember(ctx context.Context, arg CreateBandMemberParams) (BandMember, error) {
	row := q.db.QueryRowContext(ctx, createBandMember,
		arg.BandID,
		arg.ID,
		arg.Prefix,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Suffix,
		arg.NickName,
		arg.PhoneNumber,
	)
	var i BandMember
	err := row.Scan(
		&i.BandID,
		&i.ID,
		&i.Prefix,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Suffix,
		&i.NickName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBandMember = `-- name: DeleteBandMember :exec
UPDATE band_members SET deleted_at = current_timestamp
WHERE id = $1
`

func (q *Queries) DeleteBandMember(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBandMember, id)
	return err
}

const readBandMember = `-- name: ReadBandMember :one
SELECT band_id, id, prefix, first_name, middle_name, last_name, suffix, nick_name, phone_number, created_at, updated_at, deleted_at FROM band_members
WHERE id = $1 LIMIT 1
`

func (q *Queries) ReadBandMember(ctx context.Context, id uuid.UUID) (BandMember, error) {
	row := q.db.QueryRowContext(ctx, readBandMember, id)
	var i BandMember
	err := row.Scan(
		&i.BandID,
		&i.ID,
		&i.Prefix,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Suffix,
		&i.NickName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const readBandMembers = `-- name: ReadBandMembers :many
SELECT band_id, id, prefix, first_name, middle_name, last_name, suffix, nick_name, phone_number, created_at, updated_at, deleted_at FROM band_members
`

func (q *Queries) ReadBandMembers(ctx context.Context) ([]BandMember, error) {
	rows, err := q.db.QueryContext(ctx, readBandMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BandMember
	for rows.Next() {
		var i BandMember
		if err := rows.Scan(
			&i.BandID,
			&i.ID,
			&i.Prefix,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Suffix,
			&i.NickName,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBandMember = `-- name: UpdateBandMember :exec
UPDATE band_members
SET prefix = $2,
    first_name = $3,
    middle_name = $4,
    last_name = $5,
    suffix = $6,
    nick_name = $7,
    phone_number = $8,
    updated_at = current_timestamp
WHERE id = $1
`

type UpdateBandMemberParams struct {
	ID          uuid.UUID
	Prefix      sql.NullString
	FirstName   string
	MiddleName  sql.NullString
	LastName    sql.NullString
	Suffix      sql.NullString
	NickName    sql.NullString
	PhoneNumber sql.NullInt32
}

func (q *Queries) UpdateBandMember(ctx context.Context, arg UpdateBandMemberParams) error {
	_, err := q.db.ExecContext(ctx, updateBandMember,
		arg.ID,
		arg.Prefix,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Suffix,
		arg.NickName,
		arg.PhoneNumber,
	)
	return err
}
