// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: set_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSet = `-- name: CreateSet :one
INSERT INTO sets (
    set_list_id, id, name, created_at
) VALUES (
             $1, $2, $3, current_timestamp
         ) RETURNING set_list_id, id, name, created_at, updated_at, deleted_at
`

type CreateSetParams struct {
	SetListID uuid.NullUUID
	ID        uuid.UUID
	Name      sql.NullString
}

func (q *Queries) CreateSet(ctx context.Context, arg CreateSetParams) (Set, error) {
	row := q.db.QueryRowContext(ctx, createSet, arg.SetListID, arg.ID, arg.Name)
	var i Set
	err := row.Scan(
		&i.SetListID,
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteSet = `-- name: DeleteSet :exec
UPDATE sets SET deleted_at = current_timestamp
WHERE id = $1
`

func (q *Queries) DeleteSet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSet, id)
	return err
}

const readSet = `-- name: ReadSet :one
SELECT set_list_id, id, name, created_at, updated_at, deleted_at FROM sets
WHERE id = $1 LIMIT 1
`

func (q *Queries) ReadSet(ctx context.Context, id uuid.UUID) (Set, error) {
	row := q.db.QueryRowContext(ctx, readSet, id)
	var i Set
	err := row.Scan(
		&i.SetListID,
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const readSets = `-- name: ReadSets :many
SELECT set_list_id, id, name, created_at, updated_at, deleted_at FROM sets
`

func (q *Queries) ReadSets(ctx context.Context) ([]Set, error) {
	rows, err := q.db.QueryContext(ctx, readSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Set
	for rows.Next() {
		var i Set
		if err := rows.Scan(
			&i.SetListID,
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSet = `-- name: UpdateSet :exec
UPDATE sets SET name = $2, updated_at = current_timestamp
WHERE id = $1
`

type UpdateSetParams struct {
	ID   uuid.UUID
	Name sql.NullString
}

func (q *Queries) UpdateSet(ctx context.Context, arg UpdateSetParams) error {
	_, err := q.db.ExecContext(ctx, updateSet, arg.ID, arg.Name)
	return err
}
