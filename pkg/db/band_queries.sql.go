// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: band_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createBand = `-- name: CreateBand :one
INSERT INTO bands (
    id, name, created_at
) VALUES (
    $1, $2, current_timestamp
) RETURNING id, name, created_at, updated_at, deleted_at
`

type CreateBandParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) CreateBand(ctx context.Context, arg CreateBandParams) (Band, error) {
	row := q.db.QueryRowContext(ctx, createBand, arg.ID, arg.Name)
	var i Band
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBand = `-- name: DeleteBand :exec
UPDATE bands SET deleted_at = current_timestamp
WHERE id = $1
`

func (q *Queries) DeleteBand(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBand, id)
	return err
}

const readBand = `-- name: ReadBand :one
SELECT id, name, created_at, updated_at, deleted_at FROM bands
WHERE id = $1 LIMIT 1
`

func (q *Queries) ReadBand(ctx context.Context, id uuid.UUID) (Band, error) {
	row := q.db.QueryRowContext(ctx, readBand, id)
	var i Band
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const readBands = `-- name: ReadBands :many
SELECT id, name, created_at, updated_at, deleted_at FROM bands
`

func (q *Queries) ReadBands(ctx context.Context) ([]Band, error) {
	rows, err := q.db.QueryContext(ctx, readBands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Band
	for rows.Next() {
		var i Band
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBand = `-- name: UpdateBand :exec
UPDATE bands SET name = $2, updated_at = current_timestamp
WHERE id = $1
`

type UpdateBandParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateBand(ctx context.Context, arg UpdateBandParams) error {
	_, err := q.db.ExecContext(ctx, updateBand, arg.ID, arg.Name)
	return err
}
