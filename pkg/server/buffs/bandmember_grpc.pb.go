// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: bandmember.proto

package buffs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BandMemberServiceClient is the client API for BandMemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BandMemberServiceClient interface {
	CreateBandMember(ctx context.Context, in *CreateBandMemberRequest, opts ...grpc.CallOption) (*BandMember, error)
	ReadBandMember(ctx context.Context, in *ReadBandMemberRequest, opts ...grpc.CallOption) (*BandMember, error)
	UpdateBandMember(ctx context.Context, in *UpdateBandMemberRequest, opts ...grpc.CallOption) (*BandMember, error)
	DeleteBandMember(ctx context.Context, in *DeleteBandMemberRequest, opts ...grpc.CallOption) (*Empty, error)
}

type bandMemberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBandMemberServiceClient(cc grpc.ClientConnInterface) BandMemberServiceClient {
	return &bandMemberServiceClient{cc}
}

func (c *bandMemberServiceClient) CreateBandMember(ctx context.Context, in *CreateBandMemberRequest, opts ...grpc.CallOption) (*BandMember, error) {
	out := new(BandMember)
	err := c.cc.Invoke(ctx, "/barband.bandmember.BandMemberService/CreateBandMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bandMemberServiceClient) ReadBandMember(ctx context.Context, in *ReadBandMemberRequest, opts ...grpc.CallOption) (*BandMember, error) {
	out := new(BandMember)
	err := c.cc.Invoke(ctx, "/barband.bandmember.BandMemberService/ReadBandMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bandMemberServiceClient) UpdateBandMember(ctx context.Context, in *UpdateBandMemberRequest, opts ...grpc.CallOption) (*BandMember, error) {
	out := new(BandMember)
	err := c.cc.Invoke(ctx, "/barband.bandmember.BandMemberService/UpdateBandMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bandMemberServiceClient) DeleteBandMember(ctx context.Context, in *DeleteBandMemberRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/barband.bandmember.BandMemberService/DeleteBandMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BandMemberServiceServer is the server API for BandMemberService service.
// All implementations must embed UnimplementedBandMemberServiceServer
// for forward compatibility
type BandMemberServiceServer interface {
	CreateBandMember(context.Context, *CreateBandMemberRequest) (*BandMember, error)
	ReadBandMember(context.Context, *ReadBandMemberRequest) (*BandMember, error)
	UpdateBandMember(context.Context, *UpdateBandMemberRequest) (*BandMember, error)
	DeleteBandMember(context.Context, *DeleteBandMemberRequest) (*Empty, error)
	mustEmbedUnimplementedBandMemberServiceServer()
}

// UnimplementedBandMemberServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBandMemberServiceServer struct {
}

func (UnimplementedBandMemberServiceServer) CreateBandMember(context.Context, *CreateBandMemberRequest) (*BandMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBandMember not implemented")
}
func (UnimplementedBandMemberServiceServer) ReadBandMember(context.Context, *ReadBandMemberRequest) (*BandMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBandMember not implemented")
}
func (UnimplementedBandMemberServiceServer) UpdateBandMember(context.Context, *UpdateBandMemberRequest) (*BandMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBandMember not implemented")
}
func (UnimplementedBandMemberServiceServer) DeleteBandMember(context.Context, *DeleteBandMemberRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBandMember not implemented")
}
func (UnimplementedBandMemberServiceServer) mustEmbedUnimplementedBandMemberServiceServer() {}

// UnsafeBandMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BandMemberServiceServer will
// result in compilation errors.
type UnsafeBandMemberServiceServer interface {
	mustEmbedUnimplementedBandMemberServiceServer()
}

func RegisterBandMemberServiceServer(s grpc.ServiceRegistrar, srv BandMemberServiceServer) {
	s.RegisterService(&BandMemberService_ServiceDesc, srv)
}

func _BandMemberService_CreateBandMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBandMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandMemberServiceServer).CreateBandMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barband.bandmember.BandMemberService/CreateBandMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandMemberServiceServer).CreateBandMember(ctx, req.(*CreateBandMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BandMemberService_ReadBandMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBandMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandMemberServiceServer).ReadBandMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barband.bandmember.BandMemberService/ReadBandMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandMemberServiceServer).ReadBandMember(ctx, req.(*ReadBandMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BandMemberService_UpdateBandMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBandMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandMemberServiceServer).UpdateBandMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barband.bandmember.BandMemberService/UpdateBandMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandMemberServiceServer).UpdateBandMember(ctx, req.(*UpdateBandMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BandMemberService_DeleteBandMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBandMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandMemberServiceServer).DeleteBandMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barband.bandmember.BandMemberService/DeleteBandMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandMemberServiceServer).DeleteBandMember(ctx, req.(*DeleteBandMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BandMemberService_ServiceDesc is the grpc.ServiceDesc for BandMemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BandMemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "barband.bandmember.BandMemberService",
	HandlerType: (*BandMemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBandMember",
			Handler:    _BandMemberService_CreateBandMember_Handler,
		},
		{
			MethodName: "ReadBandMember",
			Handler:    _BandMemberService_ReadBandMember_Handler,
		},
		{
			MethodName: "UpdateBandMember",
			Handler:    _BandMemberService_UpdateBandMember_Handler,
		},
		{
			MethodName: "DeleteBandMember",
			Handler:    _BandMemberService_DeleteBandMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bandmember.proto",
}
