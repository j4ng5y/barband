// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: song.proto

package buffs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Song struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId string `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to NameOrTitle:
	//	*Song_Name
	//	*Song_Title
	NameOrTitle            isSong_NameOrTitle `protobuf_oneof:"NameOrTitle"`
	Genre                  string             `protobuf:"bytes,5,opt,name=genre,proto3" json:"genre,omitempty"`
	Subgenre               string             `protobuf:"bytes,6,opt,name=subgenre,proto3" json:"subgenre,omitempty"`
	PrimaryArtist          string             `protobuf:"bytes,7,opt,name=primary_artist,json=primaryArtist,proto3" json:"primary_artist,omitempty"`
	FeaturedArtists        string             `protobuf:"bytes,8,opt,name=featured_artists,json=featuredArtists,proto3" json:"featured_artists,omitempty"`
	Composer               string             `protobuf:"bytes,9,opt,name=composer,proto3" json:"composer,omitempty"`
	Publisher              string             `protobuf:"bytes,10,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Producers              string             `protobuf:"bytes,11,opt,name=producers,proto3" json:"producers,omitempty"`
	AdditionalContributors string             `protobuf:"bytes,12,opt,name=additional_contributors,json=additionalContributors,proto3" json:"additional_contributors,omitempty"`
	ExplicitContent        bool               `protobuf:"varint,13,opt,name=explicit_content,json=explicitContent,proto3" json:"explicit_content,omitempty"`
	LyricsLanguage         string             `protobuf:"bytes,14,opt,name=lyrics_language,json=lyricsLanguage,proto3" json:"lyrics_language,omitempty"`
	LyricsPublisher        string             `protobuf:"bytes,15,opt,name=lyrics_publisher,json=lyricsPublisher,proto3" json:"lyrics_publisher,omitempty"`
	CompositionOwner       string             `protobuf:"bytes,16,opt,name=composition_owner,json=compositionOwner,proto3" json:"composition_owner,omitempty"`
	YearOfComposition      int32              `protobuf:"varint,17,opt,name=year_of_composition,json=yearOfComposition,proto3" json:"year_of_composition,omitempty"`
	MasterRecordingOwner   string             `protobuf:"bytes,18,opt,name=master_recording_owner,json=masterRecordingOwner,proto3" json:"master_recording_owner,omitempty"`
	YearOfRecording        int32              `protobuf:"varint,19,opt,name=year_of_recording,json=yearOfRecording,proto3" json:"year_of_recording,omitempty"`
	ReleaseLanguage        string             `protobuf:"bytes,20,opt,name=release_language,json=releaseLanguage,proto3" json:"release_language,omitempty"`
}

func (x *Song) Reset() {
	*x = Song{}
	if protoimpl.UnsafeEnabled {
		mi := &file_song_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Song) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Song) ProtoMessage() {}

func (x *Song) ProtoReflect() protoreflect.Message {
	mi := &file_song_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Song.ProtoReflect.Descriptor instead.
func (*Song) Descriptor() ([]byte, []int) {
	return file_song_proto_rawDescGZIP(), []int{0}
}

func (x *Song) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *Song) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *Song) GetNameOrTitle() isSong_NameOrTitle {
	if m != nil {
		return m.NameOrTitle
	}
	return nil
}

// Deprecated: Do not use.
func (x *Song) GetName() string {
	if x, ok := x.GetNameOrTitle().(*Song_Name); ok {
		return x.Name
	}
	return ""
}

func (x *Song) GetTitle() string {
	if x, ok := x.GetNameOrTitle().(*Song_Title); ok {
		return x.Title
	}
	return ""
}

func (x *Song) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Song) GetSubgenre() string {
	if x != nil {
		return x.Subgenre
	}
	return ""
}

func (x *Song) GetPrimaryArtist() string {
	if x != nil {
		return x.PrimaryArtist
	}
	return ""
}

func (x *Song) GetFeaturedArtists() string {
	if x != nil {
		return x.FeaturedArtists
	}
	return ""
}

func (x *Song) GetComposer() string {
	if x != nil {
		return x.Composer
	}
	return ""
}

func (x *Song) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Song) GetProducers() string {
	if x != nil {
		return x.Producers
	}
	return ""
}

func (x *Song) GetAdditionalContributors() string {
	if x != nil {
		return x.AdditionalContributors
	}
	return ""
}

func (x *Song) GetExplicitContent() bool {
	if x != nil {
		return x.ExplicitContent
	}
	return false
}

func (x *Song) GetLyricsLanguage() string {
	if x != nil {
		return x.LyricsLanguage
	}
	return ""
}

func (x *Song) GetLyricsPublisher() string {
	if x != nil {
		return x.LyricsPublisher
	}
	return ""
}

func (x *Song) GetCompositionOwner() string {
	if x != nil {
		return x.CompositionOwner
	}
	return ""
}

func (x *Song) GetYearOfComposition() int32 {
	if x != nil {
		return x.YearOfComposition
	}
	return 0
}

func (x *Song) GetMasterRecordingOwner() string {
	if x != nil {
		return x.MasterRecordingOwner
	}
	return ""
}

func (x *Song) GetYearOfRecording() int32 {
	if x != nil {
		return x.YearOfRecording
	}
	return 0
}

func (x *Song) GetReleaseLanguage() string {
	if x != nil {
		return x.ReleaseLanguage
	}
	return ""
}

type isSong_NameOrTitle interface {
	isSong_NameOrTitle()
}

type Song_Name struct {
	// Deprecated: Do not use.
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type Song_Title struct {
	Title string `protobuf:"bytes,4,opt,name=title,proto3,oneof"`
}

func (*Song_Name) isSong_NameOrTitle() {}

func (*Song_Title) isSong_NameOrTitle() {}

type Lyric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SongId string `protobuf:"bytes,1,opt,name=song_id,json=songId,proto3" json:"song_id,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Part   string `protobuf:"bytes,3,opt,name=part,proto3" json:"part,omitempty"`
	Lyrics string `protobuf:"bytes,4,opt,name=lyrics,proto3" json:"lyrics,omitempty"`
}

func (x *Lyric) Reset() {
	*x = Lyric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_song_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lyric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lyric) ProtoMessage() {}

func (x *Lyric) ProtoReflect() protoreflect.Message {
	mi := &file_song_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lyric.ProtoReflect.Descriptor instead.
func (*Lyric) Descriptor() ([]byte, []int) {
	return file_song_proto_rawDescGZIP(), []int{1}
}

func (x *Lyric) GetSongId() string {
	if x != nil {
		return x.SongId
	}
	return ""
}

func (x *Lyric) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Lyric) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *Lyric) GetLyrics() string {
	if x != nil {
		return x.Lyrics
	}
	return ""
}

type Tab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SongId string `protobuf:"bytes,1,opt,name=song_id,json=songId,proto3" json:"song_id,omitempty"`
	Id     string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Part   string `protobuf:"bytes,3,opt,name=part,proto3" json:"part,omitempty"`
	Tabs   string `protobuf:"bytes,4,opt,name=tabs,proto3" json:"tabs,omitempty"`
}

func (x *Tab) Reset() {
	*x = Tab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_song_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tab) ProtoMessage() {}

func (x *Tab) ProtoReflect() protoreflect.Message {
	mi := &file_song_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tab.ProtoReflect.Descriptor instead.
func (*Tab) Descriptor() ([]byte, []int) {
	return file_song_proto_rawDescGZIP(), []int{2}
}

func (x *Tab) GetSongId() string {
	if x != nil {
		return x.SongId
	}
	return ""
}

func (x *Tab) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tab) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *Tab) GetTabs() string {
	if x != nil {
		return x.Tabs
	}
	return ""
}

type CreateSongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId string `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	// Types that are assignable to NameOrTitle:
	//	*CreateSongRequest_Name
	//	*CreateSongRequest_Title
	NameOrTitle            isCreateSongRequest_NameOrTitle `protobuf_oneof:"NameOrTitle"`
	Genre                  string                          `protobuf:"bytes,5,opt,name=genre,proto3" json:"genre,omitempty"`
	Subgenre               string                          `protobuf:"bytes,6,opt,name=subgenre,proto3" json:"subgenre,omitempty"`
	PrimaryArtist          string                          `protobuf:"bytes,7,opt,name=primary_artist,json=primaryArtist,proto3" json:"primary_artist,omitempty"`
	FeaturedArtists        string                          `protobuf:"bytes,8,opt,name=featured_artists,json=featuredArtists,proto3" json:"featured_artists,omitempty"`
	Composer               string                          `protobuf:"bytes,9,opt,name=composer,proto3" json:"composer,omitempty"`
	Publisher              string                          `protobuf:"bytes,10,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Producers              string                          `protobuf:"bytes,11,opt,name=producers,proto3" json:"producers,omitempty"`
	AdditionalContributors string                          `protobuf:"bytes,12,opt,name=additional_contributors,json=additionalContributors,proto3" json:"additional_contributors,omitempty"`
	ExplicitContent        bool                            `protobuf:"varint,13,opt,name=explicit_content,json=explicitContent,proto3" json:"explicit_content,omitempty"`
	LyricsLanguage         string                          `protobuf:"bytes,14,opt,name=lyrics_language,json=lyricsLanguage,proto3" json:"lyrics_language,omitempty"`
	LyricsPublisher        string                          `protobuf:"bytes,15,opt,name=lyrics_publisher,json=lyricsPublisher,proto3" json:"lyrics_publisher,omitempty"`
	CompositionOwner       string                          `protobuf:"bytes,16,opt,name=composition_owner,json=compositionOwner,proto3" json:"composition_owner,omitempty"`
	YearOfComposition      int32                           `protobuf:"varint,17,opt,name=year_of_composition,json=yearOfComposition,proto3" json:"year_of_composition,omitempty"`
	MasterRecordingOwner   string                          `protobuf:"bytes,18,opt,name=master_recording_owner,json=masterRecordingOwner,proto3" json:"master_recording_owner,omitempty"`
	YearOfRecording        int32                           `protobuf:"varint,19,opt,name=year_of_recording,json=yearOfRecording,proto3" json:"year_of_recording,omitempty"`
	ReleaseLanguage        string                          `protobuf:"bytes,20,opt,name=release_language,json=releaseLanguage,proto3" json:"release_language,omitempty"`
}

func (x *CreateSongRequest) Reset() {
	*x = CreateSongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_song_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSongRequest) ProtoMessage() {}

func (x *CreateSongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_song_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSongRequest.ProtoReflect.Descriptor instead.
func (*CreateSongRequest) Descriptor() ([]byte, []int) {
	return file_song_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSongRequest) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (m *CreateSongRequest) GetNameOrTitle() isCreateSongRequest_NameOrTitle {
	if m != nil {
		return m.NameOrTitle
	}
	return nil
}

// Deprecated: Do not use.
func (x *CreateSongRequest) GetName() string {
	if x, ok := x.GetNameOrTitle().(*CreateSongRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *CreateSongRequest) GetTitle() string {
	if x, ok := x.GetNameOrTitle().(*CreateSongRequest_Title); ok {
		return x.Title
	}
	return ""
}

func (x *CreateSongRequest) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *CreateSongRequest) GetSubgenre() string {
	if x != nil {
		return x.Subgenre
	}
	return ""
}

func (x *CreateSongRequest) GetPrimaryArtist() string {
	if x != nil {
		return x.PrimaryArtist
	}
	return ""
}

func (x *CreateSongRequest) GetFeaturedArtists() string {
	if x != nil {
		return x.FeaturedArtists
	}
	return ""
}

func (x *CreateSongRequest) GetComposer() string {
	if x != nil {
		return x.Composer
	}
	return ""
}

func (x *CreateSongRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *CreateSongRequest) GetProducers() string {
	if x != nil {
		return x.Producers
	}
	return ""
}

func (x *CreateSongRequest) GetAdditionalContributors() string {
	if x != nil {
		return x.AdditionalContributors
	}
	return ""
}

func (x *CreateSongRequest) GetExplicitContent() bool {
	if x != nil {
		return x.ExplicitContent
	}
	return false
}

func (x *CreateSongRequest) GetLyricsLanguage() string {
	if x != nil {
		return x.LyricsLanguage
	}
	return ""
}

func (x *CreateSongRequest) GetLyricsPublisher() string {
	if x != nil {
		return x.LyricsPublisher
	}
	return ""
}

func (x *CreateSongRequest) GetCompositionOwner() string {
	if x != nil {
		return x.CompositionOwner
	}
	return ""
}

func (x *CreateSongRequest) GetYearOfComposition() int32 {
	if x != nil {
		return x.YearOfComposition
	}
	return 0
}

func (x *CreateSongRequest) GetMasterRecordingOwner() string {
	if x != nil {
		return x.MasterRecordingOwner
	}
	return ""
}

func (x *CreateSongRequest) GetYearOfRecording() int32 {
	if x != nil {
		return x.YearOfRecording
	}
	return 0
}

func (x *CreateSongRequest) GetReleaseLanguage() string {
	if x != nil {
		return x.ReleaseLanguage
	}
	return ""
}

type isCreateSongRequest_NameOrTitle interface {
	isCreateSongRequest_NameOrTitle()
}

type CreateSongRequest_Name struct {
	// Deprecated: Do not use.
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type CreateSongRequest_Title struct {
	Title string `protobuf:"bytes,4,opt,name=title,proto3,oneof"`
}

func (*CreateSongRequest_Name) isCreateSongRequest_NameOrTitle() {}

func (*CreateSongRequest_Title) isCreateSongRequest_NameOrTitle() {}

type ReadSongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadSongRequest) Reset() {
	*x = ReadSongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_song_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadSongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadSongRequest) ProtoMessage() {}

func (x *ReadSongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_song_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadSongRequest.ProtoReflect.Descriptor instead.
func (*ReadSongRequest) Descriptor() ([]byte, []int) {
	return file_song_proto_rawDescGZIP(), []int{4}
}

func (x *ReadSongRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateSongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to NameOrTitle:
	//	*UpdateSongRequest_Name
	//	*UpdateSongRequest_Title
	NameOrTitle            isUpdateSongRequest_NameOrTitle `protobuf_oneof:"NameOrTitle"`
	Genre                  string                          `protobuf:"bytes,5,opt,name=genre,proto3" json:"genre,omitempty"`
	Subgenre               string                          `protobuf:"bytes,6,opt,name=subgenre,proto3" json:"subgenre,omitempty"`
	PrimaryArtist          string                          `protobuf:"bytes,7,opt,name=primary_artist,json=primaryArtist,proto3" json:"primary_artist,omitempty"`
	FeaturedArtists        string                          `protobuf:"bytes,8,opt,name=featured_artists,json=featuredArtists,proto3" json:"featured_artists,omitempty"`
	Composer               string                          `protobuf:"bytes,9,opt,name=composer,proto3" json:"composer,omitempty"`
	Publisher              string                          `protobuf:"bytes,10,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Producers              string                          `protobuf:"bytes,11,opt,name=producers,proto3" json:"producers,omitempty"`
	AdditionalContributors string                          `protobuf:"bytes,12,opt,name=additional_contributors,json=additionalContributors,proto3" json:"additional_contributors,omitempty"`
	ExplicitContent        bool                            `protobuf:"varint,13,opt,name=explicit_content,json=explicitContent,proto3" json:"explicit_content,omitempty"`
	LyricsLanguage         string                          `protobuf:"bytes,14,opt,name=lyrics_language,json=lyricsLanguage,proto3" json:"lyrics_language,omitempty"`
	LyricsPublisher        string                          `protobuf:"bytes,15,opt,name=lyrics_publisher,json=lyricsPublisher,proto3" json:"lyrics_publisher,omitempty"`
	CompositionOwner       string                          `protobuf:"bytes,16,opt,name=composition_owner,json=compositionOwner,proto3" json:"composition_owner,omitempty"`
	YearOfComposition      int32                           `protobuf:"varint,17,opt,name=year_of_composition,json=yearOfComposition,proto3" json:"year_of_composition,omitempty"`
	MasterRecordingOwner   string                          `protobuf:"bytes,18,opt,name=master_recording_owner,json=masterRecordingOwner,proto3" json:"master_recording_owner,omitempty"`
	YearOfRecording        int32                           `protobuf:"varint,19,opt,name=year_of_recording,json=yearOfRecording,proto3" json:"year_of_recording,omitempty"`
	ReleaseLanguage        string                          `protobuf:"bytes,20,opt,name=release_language,json=releaseLanguage,proto3" json:"release_language,omitempty"`
}

func (x *UpdateSongRequest) Reset() {
	*x = UpdateSongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_song_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSongRequest) ProtoMessage() {}

func (x *UpdateSongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_song_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSongRequest.ProtoReflect.Descriptor instead.
func (*UpdateSongRequest) Descriptor() ([]byte, []int) {
	return file_song_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSongRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *UpdateSongRequest) GetNameOrTitle() isUpdateSongRequest_NameOrTitle {
	if m != nil {
		return m.NameOrTitle
	}
	return nil
}

// Deprecated: Do not use.
func (x *UpdateSongRequest) GetName() string {
	if x, ok := x.GetNameOrTitle().(*UpdateSongRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *UpdateSongRequest) GetTitle() string {
	if x, ok := x.GetNameOrTitle().(*UpdateSongRequest_Title); ok {
		return x.Title
	}
	return ""
}

func (x *UpdateSongRequest) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *UpdateSongRequest) GetSubgenre() string {
	if x != nil {
		return x.Subgenre
	}
	return ""
}

func (x *UpdateSongRequest) GetPrimaryArtist() string {
	if x != nil {
		return x.PrimaryArtist
	}
	return ""
}

func (x *UpdateSongRequest) GetFeaturedArtists() string {
	if x != nil {
		return x.FeaturedArtists
	}
	return ""
}

func (x *UpdateSongRequest) GetComposer() string {
	if x != nil {
		return x.Composer
	}
	return ""
}

func (x *UpdateSongRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *UpdateSongRequest) GetProducers() string {
	if x != nil {
		return x.Producers
	}
	return ""
}

func (x *UpdateSongRequest) GetAdditionalContributors() string {
	if x != nil {
		return x.AdditionalContributors
	}
	return ""
}

func (x *UpdateSongRequest) GetExplicitContent() bool {
	if x != nil {
		return x.ExplicitContent
	}
	return false
}

func (x *UpdateSongRequest) GetLyricsLanguage() string {
	if x != nil {
		return x.LyricsLanguage
	}
	return ""
}

func (x *UpdateSongRequest) GetLyricsPublisher() string {
	if x != nil {
		return x.LyricsPublisher
	}
	return ""
}

func (x *UpdateSongRequest) GetCompositionOwner() string {
	if x != nil {
		return x.CompositionOwner
	}
	return ""
}

func (x *UpdateSongRequest) GetYearOfComposition() int32 {
	if x != nil {
		return x.YearOfComposition
	}
	return 0
}

func (x *UpdateSongRequest) GetMasterRecordingOwner() string {
	if x != nil {
		return x.MasterRecordingOwner
	}
	return ""
}

func (x *UpdateSongRequest) GetYearOfRecording() int32 {
	if x != nil {
		return x.YearOfRecording
	}
	return 0
}

func (x *UpdateSongRequest) GetReleaseLanguage() string {
	if x != nil {
		return x.ReleaseLanguage
	}
	return ""
}

type isUpdateSongRequest_NameOrTitle interface {
	isUpdateSongRequest_NameOrTitle()
}

type UpdateSongRequest_Name struct {
	// Deprecated: Do not use.
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

type UpdateSongRequest_Title struct {
	Title string `protobuf:"bytes,4,opt,name=title,proto3,oneof"`
}

func (*UpdateSongRequest_Name) isUpdateSongRequest_NameOrTitle() {}

func (*UpdateSongRequest_Title) isUpdateSongRequest_NameOrTitle() {}

type DeleteSongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSongRequest) Reset() {
	*x = DeleteSongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_song_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSongRequest) ProtoMessage() {}

func (x *DeleteSongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_song_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSongRequest.ProtoReflect.Descriptor instead.
func (*DeleteSongRequest) Descriptor() ([]byte, []int) {
	return file_song_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSongRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddLyricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SongId string `protobuf:"bytes,1,opt,name=song_id,json=songId,proto3" json:"song_id,omitempty"`
	Part   string `protobuf:"bytes,2,opt,name=part,proto3" json:"part,omitempty"`
	Lyrics string `protobuf:"bytes,3,opt,name=lyrics,proto3" json:"lyrics,omitempty"`
}

func (x *AddLyricsRequest) Reset() {
	*x = AddLyricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_song_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLyricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLyricsRequest) ProtoMessage() {}

func (x *AddLyricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_song_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLyricsRequest.ProtoReflect.Descriptor instead.
func (*AddLyricsRequest) Descriptor() ([]byte, []int) {
	return file_song_proto_rawDescGZIP(), []int{7}
}

func (x *AddLyricsRequest) GetSongId() string {
	if x != nil {
		return x.SongId
	}
	return ""
}

func (x *AddLyricsRequest) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *AddLyricsRequest) GetLyrics() string {
	if x != nil {
		return x.Lyrics
	}
	return ""
}

type AddTabsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SongId string `protobuf:"bytes,1,opt,name=song_id,json=songId,proto3" json:"song_id,omitempty"`
	Part   string `protobuf:"bytes,2,opt,name=part,proto3" json:"part,omitempty"`
	Tabs   string `protobuf:"bytes,3,opt,name=tabs,proto3" json:"tabs,omitempty"`
}

func (x *AddTabsRequest) Reset() {
	*x = AddTabsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_song_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTabsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTabsRequest) ProtoMessage() {}

func (x *AddTabsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_song_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTabsRequest.ProtoReflect.Descriptor instead.
func (*AddTabsRequest) Descriptor() ([]byte, []int) {
	return file_song_proto_rawDescGZIP(), []int{8}
}

func (x *AddTabsRequest) GetSongId() string {
	if x != nil {
		return x.SongId
	}
	return ""
}

func (x *AddTabsRequest) GetPart() string {
	if x != nil {
		return x.Part
	}
	return ""
}

func (x *AddTabsRequest) GetTabs() string {
	if x != nil {
		return x.Tabs
	}
	return ""
}

var File_song_proto protoreflect.FileDescriptor

var file_song_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x62, 0x61,
	0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73, 0x6f, 0x6e, 0x67, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x05, 0x0a, 0x04, 0x53, 0x6f, 0x6e,
	0x67, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x72, 0x74,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x79,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x79, 0x72, 0x69, 0x63, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x79,
	0x65, 0x61, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x79, 0x65,
	0x61, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x5c, 0x0a, 0x05, 0x4c, 0x79, 0x72, 0x69, 0x63,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x79, 0x72, 0x69, 0x63, 0x73, 0x22, 0x56, 0x0a, 0x03, 0x54, 0x61, 0x62, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x62,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x62, 0x73, 0x22, 0xe9, 0x05,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41,
	0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x13, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x79, 0x65, 0x61, 0x72,
	0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x4e, 0x61,
	0x6d, 0x65, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe2, 0x05, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x79, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x79,
	0x65, 0x61, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4c, 0x79, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x22,
	0x51, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x62, 0x73, 0x32, 0xa2, 0x03, 0x0a, 0x0b, 0x53, 0x6f, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67,
	0x12, 0x1f, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73, 0x6f, 0x6e, 0x67, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73, 0x6f, 0x6e, 0x67,
	0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x6f, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73, 0x6f,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73, 0x6f, 0x6e,
	0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64,
	0x2e, 0x73, 0x6f, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e,
	0x64, 0x2e, 0x73, 0x6f, 0x6e, 0x67, 0x2e, 0x53, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x62, 0x61,
	0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73, 0x6f, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x62,
	0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4c, 0x79, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x1e, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73, 0x6f, 0x6e,
	0x67, 0x2e, 0x41, 0x64, 0x64, 0x4c, 0x79, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73, 0x6f, 0x6e,
	0x67, 0x2e, 0x4c, 0x79, 0x72, 0x69, 0x63, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x62, 0x73, 0x12, 0x1c, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73,
	0x6f, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x61, 0x72, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x73, 0x6f, 0x6e,
	0x67, 0x2e, 0x54, 0x61, 0x62, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x34, 0x6e, 0x67, 0x35, 0x79, 0x2f, 0x62, 0x61, 0x72,
	0x62, 0x61, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x62, 0x75, 0x66, 0x66, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_song_proto_rawDescOnce sync.Once
	file_song_proto_rawDescData = file_song_proto_rawDesc
)

func file_song_proto_rawDescGZIP() []byte {
	file_song_proto_rawDescOnce.Do(func() {
		file_song_proto_rawDescData = protoimpl.X.CompressGZIP(file_song_proto_rawDescData)
	})
	return file_song_proto_rawDescData
}

var file_song_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_song_proto_goTypes = []interface{}{
	(*Song)(nil),              // 0: barband.song.Song
	(*Lyric)(nil),             // 1: barband.song.Lyric
	(*Tab)(nil),               // 2: barband.song.Tab
	(*CreateSongRequest)(nil), // 3: barband.song.CreateSongRequest
	(*ReadSongRequest)(nil),   // 4: barband.song.ReadSongRequest
	(*UpdateSongRequest)(nil), // 5: barband.song.UpdateSongRequest
	(*DeleteSongRequest)(nil), // 6: barband.song.DeleteSongRequest
	(*AddLyricsRequest)(nil),  // 7: barband.song.AddLyricsRequest
	(*AddTabsRequest)(nil),    // 8: barband.song.AddTabsRequest
	(*Empty)(nil),             // 9: barband.common.Empty
}
var file_song_proto_depIdxs = []int32{
	3, // 0: barband.song.SongService.CreateSong:input_type -> barband.song.CreateSongRequest
	4, // 1: barband.song.SongService.ReadSong:input_type -> barband.song.ReadSongRequest
	5, // 2: barband.song.SongService.UpdateSong:input_type -> barband.song.UpdateSongRequest
	6, // 3: barband.song.SongService.DeleteSong:input_type -> barband.song.DeleteSongRequest
	7, // 4: barband.song.SongService.AddLyrics:input_type -> barband.song.AddLyricsRequest
	8, // 5: barband.song.SongService.AddTabs:input_type -> barband.song.AddTabsRequest
	0, // 6: barband.song.SongService.CreateSong:output_type -> barband.song.Song
	0, // 7: barband.song.SongService.ReadSong:output_type -> barband.song.Song
	0, // 8: barband.song.SongService.UpdateSong:output_type -> barband.song.Song
	9, // 9: barband.song.SongService.DeleteSong:output_type -> barband.common.Empty
	1, // 10: barband.song.SongService.AddLyrics:output_type -> barband.song.Lyric
	2, // 11: barband.song.SongService.AddTabs:output_type -> barband.song.Tab
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_song_proto_init() }
func file_song_proto_init() {
	if File_song_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_song_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Song); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_song_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lyric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_song_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_song_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_song_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadSongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_song_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_song_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_song_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLyricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_song_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTabsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_song_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Song_Name)(nil),
		(*Song_Title)(nil),
	}
	file_song_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateSongRequest_Name)(nil),
		(*CreateSongRequest_Title)(nil),
	}
	file_song_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UpdateSongRequest_Name)(nil),
		(*UpdateSongRequest_Title)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_song_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_song_proto_goTypes,
		DependencyIndexes: file_song_proto_depIdxs,
		MessageInfos:      file_song_proto_msgTypes,
	}.Build()
	File_song_proto = out.File
	file_song_proto_rawDesc = nil
	file_song_proto_goTypes = nil
	file_song_proto_depIdxs = nil
}
