// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: band.proto

package buffs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BandServiceClient is the client API for BandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BandServiceClient interface {
	CreateBand(ctx context.Context, in *CreateBandRequest, opts ...grpc.CallOption) (*Band, error)
	ReadBand(ctx context.Context, in *ReadBandRequest, opts ...grpc.CallOption) (*Band, error)
	UpdateBand(ctx context.Context, in *UpdateBandRequest, opts ...grpc.CallOption) (*Band, error)
	DeleteBand(ctx context.Context, in *DeleteBandRequest, opts ...grpc.CallOption) (*Empty, error)
}

type bandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBandServiceClient(cc grpc.ClientConnInterface) BandServiceClient {
	return &bandServiceClient{cc}
}

func (c *bandServiceClient) CreateBand(ctx context.Context, in *CreateBandRequest, opts ...grpc.CallOption) (*Band, error) {
	out := new(Band)
	err := c.cc.Invoke(ctx, "/barband.band.BandService/CreateBand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bandServiceClient) ReadBand(ctx context.Context, in *ReadBandRequest, opts ...grpc.CallOption) (*Band, error) {
	out := new(Band)
	err := c.cc.Invoke(ctx, "/barband.band.BandService/ReadBand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bandServiceClient) UpdateBand(ctx context.Context, in *UpdateBandRequest, opts ...grpc.CallOption) (*Band, error) {
	out := new(Band)
	err := c.cc.Invoke(ctx, "/barband.band.BandService/UpdateBand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bandServiceClient) DeleteBand(ctx context.Context, in *DeleteBandRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/barband.band.BandService/DeleteBand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BandServiceServer is the server API for BandService service.
// All implementations must embed UnimplementedBandServiceServer
// for forward compatibility
type BandServiceServer interface {
	CreateBand(context.Context, *CreateBandRequest) (*Band, error)
	ReadBand(context.Context, *ReadBandRequest) (*Band, error)
	UpdateBand(context.Context, *UpdateBandRequest) (*Band, error)
	DeleteBand(context.Context, *DeleteBandRequest) (*Empty, error)
	mustEmbedUnimplementedBandServiceServer()
}

// UnimplementedBandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBandServiceServer struct {
}

func (UnimplementedBandServiceServer) CreateBand(context.Context, *CreateBandRequest) (*Band, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBand not implemented")
}
func (UnimplementedBandServiceServer) ReadBand(context.Context, *ReadBandRequest) (*Band, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBand not implemented")
}
func (UnimplementedBandServiceServer) UpdateBand(context.Context, *UpdateBandRequest) (*Band, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBand not implemented")
}
func (UnimplementedBandServiceServer) DeleteBand(context.Context, *DeleteBandRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBand not implemented")
}
func (UnimplementedBandServiceServer) mustEmbedUnimplementedBandServiceServer() {}

// UnsafeBandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BandServiceServer will
// result in compilation errors.
type UnsafeBandServiceServer interface {
	mustEmbedUnimplementedBandServiceServer()
}

func RegisterBandServiceServer(s grpc.ServiceRegistrar, srv BandServiceServer) {
	s.RegisterService(&BandService_ServiceDesc, srv)
}

func _BandService_CreateBand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandServiceServer).CreateBand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barband.band.BandService/CreateBand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandServiceServer).CreateBand(ctx, req.(*CreateBandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BandService_ReadBand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandServiceServer).ReadBand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barband.band.BandService/ReadBand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandServiceServer).ReadBand(ctx, req.(*ReadBandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BandService_UpdateBand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandServiceServer).UpdateBand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barband.band.BandService/UpdateBand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandServiceServer).UpdateBand(ctx, req.(*UpdateBandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BandService_DeleteBand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandServiceServer).DeleteBand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/barband.band.BandService/DeleteBand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandServiceServer).DeleteBand(ctx, req.(*DeleteBandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BandService_ServiceDesc is the grpc.ServiceDesc for BandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "barband.band.BandService",
	HandlerType: (*BandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBand",
			Handler:    _BandService_CreateBand_Handler,
		},
		{
			MethodName: "ReadBand",
			Handler:    _BandService_ReadBand_Handler,
		},
		{
			MethodName: "UpdateBand",
			Handler:    _BandService_UpdateBand_Handler,
		},
		{
			MethodName: "DeleteBand",
			Handler:    _BandService_DeleteBand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "band.proto",
}
